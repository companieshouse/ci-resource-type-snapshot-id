#!/usr/bin/env python3

import boto3
import botocore
import json
import sys
from datetime import datetime

DEFAULT_AWS_REGION = "eu-west-2"
REQ_PARAMS = [
    "aws_access_key_id",
    "aws_secret_access_key",
    "aws_region",
    "volume_id"
]

def set_source_defaults(payload):
    if "aws_region" not in payload["source"].keys():
        payload["source"].update({"aws_region": DEFAULT_AWS_REGION})

    return payload


def validate_source(payload):
    for param in REQ_PARAMS:
        if param not in payload["source"].keys():
            sys.stderr.write("\nRequired parameter {} not defined\n".format(param))
            sys.exit(1)


def return_snapshots(payload):
    try:
        session = boto3.Session(
            aws_access_key_id=payload["source"]["aws_access_key_id"],
            aws_secret_access_key=payload["source"]["aws_secret_access_key"],
            region_name=payload["source"]["aws_region"]
        )
        ec2_client = session.client(
            "ec2",
            payload["source"]["aws_region"]
        )

        response = ec2_client.describe_snapshots(
            Filters=[
                {
                    "Name": "volume-id",
                    "Values": [payload["source"]["volume_id"]]
                },
            ]
        )
    except botocore.exceptions.ClientError as err:
        sys.stderr.write(
            "Failed to connect to AWS:\n{}".format(err)
        )
        sys.exit(1)

    if response["ResponseMetadata"]["HTTPStatusCode"] == 200:
        if len(response["Snapshots"]) == 0:
            ec2_client.close()
            sys.stderr.write(
                "No Snapshots found for EBS Volume ID: {}".format(
                    payload["source"]["volume_id"]
                )
            )
            sys.exit(1)

        snapshot_date_list = []
        for snapshot in response["Snapshots"]:
            snapshot_id = snapshot["SnapshotId"]
            snapshot_date = snapshot["StartTime"]
            snapshot_date_list.append(snapshot_date)

        snapshot_date_list = sorted([datetime.strftime(dt, "%Y-%m-%d %H:%M:%S.%f%z") for dt in snapshot_date_list], reverse=True)
        filtered_list = []
        for date in snapshot_date_list:
            filtered_list.append(date)
            if "version" in payload.keys():
                if date == payload["version"]["snapshot_datetime"]:
                    break

        filtered_list.sort()

        output_list = []
        for date in filtered_list:
            output_list.append({"snapshot_datetime": date})

        ec2_client.close()
        return output_list

    else:
        ec2_client.close()
        sys.stderr.write("\nReceived {} error from AWS\n".format(
            response["ResponseMetadata"]["HTTPStatusCode"]
        ))
        sys.exit(1)


if __name__ == "__main__":
    payload = set_source_defaults(json.load(sys.stdin))
    validate_source(payload)
    sys.stdout.write(json.dumps(return_snapshots(payload), indent=2))
